<?php

namespace App\Http\Controllers;

use Carbon\Carbon;

use Auth;

use Session;

use Mail;

use App\User;

use Illuminate\Http\Request;

class PaymentController extends Controller
{
    public function __construct(){
    	$this->initialize();
    }

    public function requestPesapalPayment($id){

    	if($this->mode == 'demo'){
			$iframelink = 'https://demo.pesapal.com/api/PostPesapalDirectOrderV4';
		}elseif($this->mode == 'live'){
			$iframelink = 'https://www.pesapal.com/API/PostPesapalDirectOrderV4';
		}

		$user = User::find($id);

		if($user->paid){
			Session::flash('success', 'You have already paid for the conference');
			return redirect()->back();
		}

		$user->pesapal_merchant_reference = generateRandomString();

		$user->update();

    	if(!$user){
    		Session::flash('error', 'User not found');

    		return redirect()->back();
    	}

    	if($user->currency == 'KES'){
    		$amount 		= (($user->price + $user->accommodation_amount + $user->accompanying_person_amount) / 0.965);
    		$amount 		= round($amount,0);
    		$amount 		= number_format($amount, 2);
    	}else{
    		$amount 		= (($user->price + $user->accommodation_amount + $user->accompanying_person_amount) / 0.965);
    		$amount 		= round($amount,0);
    		$amount 		= number_format($amount, 2);
    	}
    	
    	$currency 		= $user->currency;
		$desc 			= 'Payment for CIArb International Conference as ' . $user->registration;
		$type 			= 'MERCHANT'; //default value = MERCHANT
		$reference 		= $user->pesapal_merchant_reference;//unique order id of the transaction, generated by merchant
		$first_name 	= $user->fname;
		$last_name 		= $user->lname;
		$email 			= $user->email;
		$phonenumber 	= '';

		$callback_url 	= route('payment.pesapal.callback', $user->id);

		$post_xml = "<?xml version=\"1.0\" encoding=\"utf-8\"?><PesapalDirectOrderInfo xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" Amount=\"".$amount."\" Description=\"".$desc."\" Currency=\"".$currency."\" Type=\"".$type."\" Reference=\"".$reference."\" FirstName=\"".$first_name."\" LastName=\"".$last_name."\" Email=\"".$email."\" PhoneNumber=\"".$phonenumber."\" xmlns=\"http://www.pesapal.com\" />";

		//die($post_xml);


		$post_xml = htmlentities($post_xml);

		$consumer = new \OAuthConsumer($this->consumer_key, $this->consumer_secret);

		//post transaction to pesapal
		$iframe_src = \OAuthRequest::from_consumer_and_token($consumer, $this->token, "GET", $iframelink, $this->params);
		$iframe_src->set_parameter("oauth_callback", $callback_url);
		$iframe_src->set_parameter("pesapal_request_data", $post_xml);
		$iframe_src->sign_request($this->signature_method, $consumer, $this->token);

		return view('pages.pesapal-iframe', [
			'page' 			=> 'Pay Now',
			'iframe_src' 	=> $iframe_src,
		]);

    }


    public function pesapalPaymentCallback(Request $request, $id){
    	$user = User::find($id);

    	if(!$user){
    		Session::flash('error', 'User not found');

    		return redirect()->back();
    	}

    	$user->pesapal_merchant_reference 		= $request->pesapal_merchant_reference;
    	$user->pesapal_transaction_tracking_id 	= $request->pesapal_transaction_tracking_id;
    	$user->update();


    	if($this->mode == 'demo'){
			$statusrequestAPI = 'https://demo.pesapal.com/api/querypaymentstatus';
		}elseif($this->mode == 'live'){
			$statusrequestAPI = 'https://www.pesapal.com/api/querypaymentstatus';
		}

	   $consumer = new \OAuthConsumer($this->consumer_key, $this->consumer_secret);

	   //get transaction status
	   $request_status = \OAuthRequest::from_consumer_and_token($consumer, $this->token, "GET", $statusrequestAPI, $this->params);
	   $request_status->set_parameter("pesapal_merchant_reference", $user->pesapal_merchant_reference);
	   $request_status->set_parameter("pesapal_transaction_tracking_id",$user->pesapalTrackingId);
	   $request_status->sign_request($this->signature_method, $consumer, $this->token);

	   $ch = curl_init();
	   curl_setopt($ch, CURLOPT_URL, $request_status);
	   curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
	   curl_setopt($ch, CURLOPT_HEADER, 1);
	   curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
	   if(defined('CURL_PROXY_REQUIRED')) if (CURL_PROXY_REQUIRED == 'True'){
	      
	      $proxy_tunnel_flag = (defined('CURL_PROXY_TUNNEL_FLAG') && strtoupper(CURL_PROXY_TUNNEL_FLAG) == 'FALSE') ? false : true;
	      curl_setopt ($ch, CURLOPT_HTTPPROXYTUNNEL, $proxy_tunnel_flag);
	      curl_setopt ($ch, CURLOPT_PROXYTYPE, CURLPROXY_HTTP);
	      curl_setopt ($ch, CURLOPT_PROXY, CURL_PROXY_SERVER_DETAILS);

	   }

	   $response = curl_exec($ch);

	   $header_size = curl_getinfo($ch, CURLINFO_HEADER_SIZE);
	   $raw_header  = substr($response, 0, $header_size - 4);
	   $headerArray = explode("\r\n\r\n", $raw_header);
	   $header      = $headerArray[count($headerArray) - 1];

	   //transaction status
	   $elements = preg_split("/=/",substr($response, $header_size));
	   $status = $elements[1];

	   curl_close ($ch);
	   
	   	$user->status = $status;
	   	$user->update();

		if($status == 'COMPLETED'){
			$user->paid=1;
			$user->paid_at=Carbon::now();
			$user->update();

			 try{
                $subject = "Conference Payment Received";

                Mail::send('emails.payment-received', ['subject' => $subject, 'user' => $user], function ($message) use($user, $subject){
                    $message->subject($subject);
                    $message->to($user->email);
                });

                Mail::send('emails.payment-received-support', ['subject' => $subject, 'user' => $user], function ($message) use($user, $subject){
                    $message->subject($subject);
                    $message->to(env('SUPPORT_MAIL'));
                });

            }catch(\Exception $e){
                Session::flash('error', $e->getMessage());
            }

            return view('pages.payment-successful',[
            	'page' 	=> 'Payment Successfull',
            	'user'	=> $user,
            ]);
	   	}else{
	   		return redirect()->route('payment.pesapal.verify', ['id' => $user->id]);
	   	}

	   	


    }

    public function verifyPesapalPayment($id){
    	$user = User::find($id);

    	if(!$user){
			return redirect()->back();
		}

		if($this->mode == 'demo'){
			$statusrequestAPI = 'https://demo.pesapal.com/api/querypaymentstatus';
		}elseif($this->mode == 'live'){
			$statusrequestAPI = 'https://www.pesapal.com/api/querypaymentstatus';
		}

	   $consumer = new \OAuthConsumer($this->consumer_key, $this->consumer_secret);

	   //get transaction status
	   $request_status = \OAuthRequest::from_consumer_and_token($consumer, $this->token, "GET", $statusrequestAPI, $this->params);
	   $request_status->set_parameter("pesapal_merchant_reference", $user->pesapal_merchant_reference);
	   $request_status->set_parameter("pesapal_transaction_tracking_id",$user->pesapalTrackingId);
	   $request_status->sign_request($this->signature_method, $consumer, $this->token);

	   $ch = curl_init();
	   curl_setopt($ch, CURLOPT_URL, $request_status);
	   curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
	   curl_setopt($ch, CURLOPT_HEADER, 1);
	   curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
	   if(defined('CURL_PROXY_REQUIRED')) if (CURL_PROXY_REQUIRED == 'True'){
	      
	      $proxy_tunnel_flag = (defined('CURL_PROXY_TUNNEL_FLAG') && strtoupper(CURL_PROXY_TUNNEL_FLAG) == 'FALSE') ? false : true;
	      curl_setopt ($ch, CURLOPT_HTTPPROXYTUNNEL, $proxy_tunnel_flag);
	      curl_setopt ($ch, CURLOPT_PROXYTYPE, CURLPROXY_HTTP);
	      curl_setopt ($ch, CURLOPT_PROXY, CURL_PROXY_SERVER_DETAILS);

	   }

	   $response = curl_exec($ch);

	   $header_size = curl_getinfo($ch, CURLINFO_HEADER_SIZE);
	   $raw_header  = substr($response, 0, $header_size - 4);
	   $headerArray = explode("\r\n\r\n", $raw_header);
	   $header      = $headerArray[count($headerArray) - 1];

	   //transaction status
	   $elements = preg_split("/=/",substr($response, $header_size));
	   $status = $elements[1];

	   curl_close ($ch);
	   
	   	$user->status = $status;
	   	$user->update();

		if($status == 'COMPLETED'){
			$user->paid=1;
			$user->paid_at = Carbon::now();
			$user->update();

			 try{
                $subject = "Payment Received";

                Mail::send('emails.payment-received', ['subject' => $subject, 'user' => $user], function ($message) use($user, $subject){
                    $message->subject($subject);
                    $message->to($user->email);
                });

            }catch(\Exception $e){
                Session::flash('error', $e->getMessage());
            }

            return view('pages.payment-successful',[
            	'page' 	=> 'Payment Successfull',
            	'user'	=> $user,
            ]);
	   	}else{
	   		return view('pages.payment-failed',[
            	'page' 		=> 'Payment Pending',
            	'status' 	=> $status,
            	'user'		=> $user,
            ]);
	   	}

    }

    public function pesapalPaymentIPN(Request $request){
    	// Parameters sent to you by PesaPal IPN
		$pesapalNotification 			=$request->pesapal_notification_type;
		$pesapalTrackingId 				= $request->pesapal_transaction_tracking_id;
		$pesapal_merchant_reference		= $request->pesapal_merchant_reference;

		$user = User::where('pesapal_transaction_tracking_id', $pesapal_transaction_tracking_id)->first();

		if(!$user){
			return redirect()->back();
		}

		if($pesapalNotification=="CHANGE" && $pesapalTrackingId!=''){

			if($this->mode == 'demo'){
				$statusrequestAPI = 'https://demo.pesapal.com/api/querypaymentstatus';
			}elseif($this->mode == 'live'){
				$statusrequestAPI = 'https://www.pesapal.com/api/querypaymentstatus';
			}

		   $consumer = new \OAuthConsumer($this->consumer_key, $this->consumer_secret);

		   //get transaction status
		   $request_status = \OAuthRequest::from_consumer_and_token($consumer, $this->token, "GET", $statusrequestAPI, $this->params);
		   $request_status->set_parameter("pesapal_merchant_reference", $pesapal_merchant_reference);
		   $request_status->set_parameter("pesapal_transaction_tracking_id",$pesapalTrackingId);
		   $request_status->sign_request($this->signature_method, $consumer, $this->token);

		   $ch = curl_init();
		   curl_setopt($ch, CURLOPT_URL, $request_status);
		   curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
		   curl_setopt($ch, CURLOPT_HEADER, 1);
		   curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
		   if(defined('CURL_PROXY_REQUIRED')) if (CURL_PROXY_REQUIRED == 'True'){
		      
		      $proxy_tunnel_flag = (defined('CURL_PROXY_TUNNEL_FLAG') && strtoupper(CURL_PROXY_TUNNEL_FLAG) == 'FALSE') ? false : true;
		      curl_setopt ($ch, CURLOPT_HTTPPROXYTUNNEL, $proxy_tunnel_flag);
		      curl_setopt ($ch, CURLOPT_PROXYTYPE, CURLPROXY_HTTP);
		      curl_setopt ($ch, CURLOPT_PROXY, CURL_PROXY_SERVER_DETAILS);

		   }

		   $response = curl_exec($ch);

		   $header_size = curl_getinfo($ch, CURLINFO_HEADER_SIZE);
		   $raw_header  = substr($response, 0, $header_size - 4);
		   $headerArray = explode("\r\n\r\n", $raw_header);
		   $header      = $headerArray[count($headerArray) - 1];

		   //transaction status
		   $elements = preg_split("/=/",substr($response, $header_size));
		   $status = $elements[1];

		   curl_close ($ch);
		   
		   $user->status = $status;

		   	if($status == 'COMPLETED'){
		   		$user->paid = 1;
		   		$user->paid_at = Carbon::now();
		   	}

		   $user->update();
		}

    }


}
